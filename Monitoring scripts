Automated System Health Report Script :-

#!/bin/bash

echo "============================="
echo " System Health Report - $(date) "
echo "============================="

# CPU Load
echo -e "\nüî∏ CPU Load:"
uptime | awk -F'load average:' '{ print "Load Average (1, 5, 15 min):" $2 }'

# Memory Usage
echo -e "\nüî∏ Memory Usage:"
free -h | awk 'NR==2{printf "Used: %s / Total: %s\n", $3, $2}'

# Disk Usage
echo -e "\nüî∏ Disk Usage (/ partition):"
df -h / | awk 'NR==2{printf "Used: %s / Total: %s (%s)\n", $3, $2, $5}'

# Uptime
echo -e "\nüî∏ System Uptime:"
uptime -p

# Logged in Users
echo -e "\nüî∏ Currently Logged-in Users:"
who | awk '{print $1}' | sort | uniq

# Top 5 CPU Consuming Processes
echo -e "\nüî∏ Top 5 CPU Consuming Processes:"
ps -eo pid,comm,%cpu --sort=-%cpu | head -n 6

echo -e "\n‚úÖ Report Complete.\n"


=================================================================================================


Disk Usage Alert Script:-

#!/bin/bash

THRESHOLD=80
USAGE=$(df / | grep / | awk '{print $5}' | sed 's/%//g')

if [ "$USAGE" -ge "$THRESHOLD" ]; then
    echo "‚ö†Ô∏è Disk usage is above $THRESHOLD%. Current: $USAGE%"
    # Optionally send an email or alert
else
    echo "‚úÖ Disk usage is under control: $USAGE%"
fi


====================================================

Memory Leak Detector

#!/bin/bash

echo "üîç Checking for memory hogs..."
ps aux --sort=-%mem | awk 'NR<=10{print $0}'


====================================================================================================

Zombie Process Checker

#!/bin/bash

echo "‚ò†Ô∏è  Zombie Processes:"
ps -eo pid,ppid,stat,cmd | grep -w Z


=====================================================================================================

Service Auto-Restart Script

#!/bin/bash

SERVICE="nginx"

if systemctl is-active --quiet $SERVICE; then
    echo "‚úÖ $SERVICE is running."
else
    echo "‚ùå $SERVICE is down. Restarting..."
    systemctl restart $SERVICE
fi


================================================


User Login Monitor Script

#!/bin/bash

LOG="/var/log/user_login_monitor.log"
echo "üïì User login check at $(date)" >> $LOG
who >> $LOG
echo "------------------------" >> $LOG


==================================================================================================

Log Cleaner Script

#!/bin/bash

LOG_DIR="/var/log"
find $LOG_DIR -name "*.log" -type f -mtime +7 -exec rm -f {} \;
echo "üßπ Old logs cleaned up from $LOG_DIR"


=====================================================================================

Cron Setup

0 * * * * /path/to/system_health_full.sh >> /var/log/health_report.log 2>&1




